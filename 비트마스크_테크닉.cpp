/*
* 비트마스크는 정수타입의 변수로 중복없는 원소들의 집합을 나타내는 기술입니다.
* 전체 원소의 개수가 64개 이하인 경우 하나의 변수로 집합을 나타낼 수 있어 유용합니다.
* 낮은 비트부터 i번 비트는 i번 원소를 나타냅니다.
* i번 비트가 set되어 있다면 집합 내에 해당 원소가 있다는 의미로 해석합니다.
*/

#include<iostream>
using namespace std;

using ll = long long;
int main()
{
	//1. 전체집합 구하기
	// 전체 원소가 50종류인 경우 전체집합은 다음과 같습니다.
	ll ALL = (1 << 50) - 1;
	// 1을 50번 좌측으로 쉬프트하면 1뒤에 50개의 0이 나열된 비트열이됩니다.
	// 그 상태에서 맨앞의 1이 0으로 바뀌고 뒤의 0들이 모두 1이 되어 0번비트 부터 50번비트까지 모두 set됩니다.

	//2. 집합에서 특정 원소가 있는지 확인하기
	ll set1 = 123456789; //임의로 선정한 집합
	if (set1 & (1 << 10))
		cout << "원소 10번 존재";
	//1을 10만큼 좌측 쉬프트하면 10번째 원소의 비트만 set됩니다.
	//이것을 검사하고 싶은 집합과 &연산하게 되면 
	//그 집합의 10번 비트가 1인 경우 해당 비트만 1이 되고, 나머지 비트들은 0이됩니다.
	//즉, set1에 10번 비트가 켜져있으면 (1 << 10)으로 평가되고 그렇지 않으면 0으로 평가됩니다.
	//C++에서 bool타입이 나타나야하는 문맥에서 정수로 평가되는 표현식이 존재하면 0은 false,
	//그 외에는 true로 묵시적 캐스팅 되므로 위와 같이 조건문 등에서 바로 사용할 수 있습니다.

	//3. 집합에 특정 원소 추가하기
	ll set2 = 0; //공집합
	set2 |= (1 << 10);
	//set2에는 10번 원소가 추가됩니다.

	//4. 집합에서 특정 원소 제거하기
	set2 &= ~(1 << 10);
	//set2에서 10번 원소가 제거됩니다.
	// ~(1 << 10)는 10번 원소를 제외하고 모든 비트가 set된 집합이므로 이것과 &연산하면 10번 원소만 unset합니다.
	//set2에 10번 원소가 있음을 사전에 알고 있으면 다음으로 대체 가능합니다.
	//set2 -= (1 << 10);

	//5. 원소 토글하기
	set2 ^= (1 << 10);
	//set2의 10번 비트가 1이었다면 0으로, 0이었다면 1으로 바뀝니다.

	//6. 두 집합 간의 연산
	ll setUnion = set1 | set2;//합집합
	ll setIntersection = set1 & set2;//교집합
	ll setRelativeComplement = set1 & ~set2;//차집합
	ll setSymmetricDifference = set1 ^ set2;//대칭 차집합
	
	//7. 최하위 비트 구하기
	ll firstBit = set1 & -set1;
	//이것은 원소 번호가 아니라 최하위 비트만 켜져있는 집합을 구하는 것입니다.

	//8. 최소 원소 지우기
	set1 &= (set1 - 1);
	// 1을 빼면 최하위 비트가 unset되고 그 밑의 비트들이 set됩니다. 
	//이것과 원래 집합의 교집합을 구하면 최소 원소만 제거된 집합이 나옵니다.

	//9. 모든 부분 집합 순회
	for (ll subset = set1; subset; subset = ((subset - 1) & set1)) {
		//subset은 set1의 부분집합(공집합 제외)
	}
	//subset에서 1을 빼면 최하위 비트가 unset되며 그 밑의 비트들이 전부 set됩니다.
	//이것과 set1의 교집합을 구하면 set 됐던 비트들 중 set1에 속하지 않은 비트들은 다시 unset됩니다.
	//이것을 반복하면 set1의 모든 부분집합을 방문할 수있습니다.

	//10. 전체집합에 대한 모든 부분 집합 순회
	for (ll subset = ALL; subset; --subset) {
		//subset은 ALL의 부분집합(공집합 제외)
	}
	// 전체집합의 부분집합은 그것보다 작은 모든 자연수입니다.
}